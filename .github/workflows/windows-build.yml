name: Windows portable build

on:
  workflow_dispatch:
  push:
    tags: ["v*"]  # chạy khi bạn tag v1.0.0, v1.1.0..., tùy thích

jobs:
  build:
    runs-on: windows-latest
    env:
      TECTONIC_VER: "0.15.0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Tải Tectonic bản Windows và đặt vào vendor/tectonic/windows-x86_64/tectonic.exe
      - name: Fetch Tectonic (Windows)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path vendor\tectonic\windows-x86_64 | Out-Null
          $url = "https://github.com/tectonic-typesetting/tectonic/releases/download/tectonic%40${env:TECTONIC_VER}/tectonic-${env:TECTONIC_VER}-x86_64-pc-windows-msvc.zip"
          Invoke-WebRequest -Uri $url -OutFile tectonic.zip
          Expand-Archive tectonic.zip -DestinationPath vendor\tectonic\windows-x86_64 -Force
          $folder = Get-ChildItem vendor\tectonic\windows-x86_64 | Where-Object { $_.PSIsContainer -and $_.Name -like "tectonic-*" } | Select-Object -First 1
          Copy-Item "$($folder.FullName)\tectonic.exe" vendor\tectonic\windows-x86_64\tectonic.exe -Force
          Remove-Item tectonic.zip

      - name: Build Student (PyInstaller)
        run: pyinstaller packaging\win_student.spec

      - name: Build Supervisor (PyInstaller)
        run: pyinstaller packaging\win_supervisor.spec

      # In thêm cây thư mục dist để dễ debug khi tên output khác kỳ vọng
      - name: List dist/
        shell: pwsh
        run: |
          Write-Host "==== dist/ ===="
          Get-ChildItem -Recurse -Force dist | ForEach-Object { $_.FullName }

      # Thêm README.txt vào mỗi gói (tuỳ chọn, có thể tạo file này trong repo)
      - name: Inject README into outputs (optional)
        if: ${{ hashFiles('packaging/README_windows_portable.txt') != '' }}
        shell: pwsh
        run: |
          $readme = "packaging\README_windows_portable.txt"
          # tìm thư mục student/supervisor trong dist
          $studentDir = Get-ChildItem dist -Directory | Where-Object { $_.Name -match 'Student' } | Select-Object -First 1
          $superDir   = Get-ChildItem dist -Directory | Where-Object { $_.Name -match 'Supervisor' } | Select-Object -First 1
          if ($studentDir) { Copy-Item $readme "$($studentDir.FullName)\README.txt" -Force }
          if ($superDir)   { Copy-Item $readme "$($superDir.FullName)\README.txt" -Force }

      # Tạo ZIP portable theo thư mục thực tế trong dist
      - name: Make portable ZIPs
        shell: pwsh
        run: |
          $ver = if ("${{ github.ref_name }}") { "${{ github.ref_name }}" } else { "dev" }
          $studentDir = Get-ChildItem dist -Directory | Where-Object { $_.Name -match 'Student' } | Select-Object -First 1
          $superDir   = Get-ChildItem dist -Directory | Where-Object { $_.Name -match 'Supervisor' } | Select-Object -First 1

          if (-not $studentDir) { throw "Cannot find Student build folder in dist/" }
          if (-not $superDir)   { throw "Cannot find Supervisor build folder in dist/" }

          $studentZip = "dist\Paperforge-Student-win64-portable-$ver.zip"
          $superZip   = "dist\Paperforge-Supervisor-win64-portable-$ver.zip"

          if (Test-Path $studentZip) { Remove-Item $studentZip -Force }
          if (Test-Path $superZip)   { Remove-Item $superZip -Force }

          Compress-Archive -Path "$($studentDir.FullName)\*" -DestinationPath $studentZip -Force
          Compress-Archive -Path "$($superDir.FullName)\*"   -DestinationPath $superZip   -Force

      - name: Upload portable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: |
            dist/Paperforge-Student-win64-portable-*.zip
            dist/Paperforge-Supervisor-win64-portable-*.zip
