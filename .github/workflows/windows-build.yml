name: Windows build

on:
  push:
    tags: ['v*']          # push tag v1.2.3 sẽ chạy
  workflow_dispatch:      # cho phép chạy tay

permissions:
  contents: write         # tạo/chỉnh GitHub Release

jobs:
  build-windows:
    runs-on: windows-latest
    defaults: { run: { shell: pwsh } }
    outputs:
      app_version: ${{ steps.ver.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with: { lfs: true, fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller==6.16.0

      - name: Stamp version into env & file
        run: |
          $ver = "${{ github.ref_name }}"
          if ($env:GITHUB_REF_TYPE -eq "tag") { $ver = $ver.TrimStart('v') } else { $ver = "0.0.0-dev" }
          "PAPERFORGE_VERSION=$ver"                  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "PAPERFORGE_REPO=minhquach8/paperforge"    | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          @"
          { "version": "$ver" }
          "@ | Set-Content shared\paperforge_build.json -Encoding utf8

      # (tuỳ chọn) ép shared/version.py khớp tag
      - name: Force version.py to match tag
        run: |
          $ver = "${{ github.ref_name }}".TrimStart('v')
          if (Test-Path shared\version.py) {
            (Get-Content shared\version.py -Raw) `
              -replace 'APP_VERSION\s*=\s*".*?"', "APP_VERSION = `"$ver`"" `
            | Set-Content shared\version.py -Encoding utf8
          }

      - name: Read app version
        id: ver
        run: |
          try { $v = python -c "from shared.version import APP_VERSION; print(APP_VERSION)" }
          catch { $v = "$env:PAPERFORGE_VERSION" }
          echo "version=$v" >> $env:GITHUB_OUTPUT

      - name: Build Student (PyInstaller)
        run: pyinstaller -y packaging\win_student.spec

      - name: Build Supervisor (PyInstaller)
        run: pyinstaller -y packaging\win_supervisor.spec

      - name: Zip portable bundles
        run: |
          $superDir = Get-ChildItem -Path dist -Directory | Where-Object { $_.Name -match 'Supervisor' } | Select-Object -First 1
          if (-not $superDir) { throw "Không tìm thấy thư mục Supervisor trong dist." }
          Compress-Archive -Path "$($superDir.FullName)\*" -DestinationPath "dist\Paperforge-Supervisor-Portable-win64.zip" -Force

          $studDir = Get-ChildItem -Path dist -Directory | Where-Object { $_.Name -match 'Student' } | Select-Object -First 1
          if (-not $studDir) { throw "Không tìm thấy thư mục Student trong dist." }
          Compress-Archive -Path "$($studDir.FullName)\*" -DestinationPath "dist\Paperforge-Student-Portable-win64.zip" -Force

      - name: Upload portable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: paperforge-portable-${{ github.ref_name }}   # v1.x.y
          path: |
            dist/Paperforge-Supervisor-Portable-win64.zip
            dist/Paperforge-Student-Portable-win64.zip
          if-no-files-found: error

  release:
    needs: build-windows
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: paperforge-portable-${{ github.ref_name }}
          path: dist

      - name: Install minisign
        run: |
          sudo apt-get update
          sudo apt-get install -y minisign

      - name: Restore signing key
        env:
          MINISIGN_SECRET_B64: ${{ secrets.MINISIGN_SECRET_B64 }}
        run: |
          test -n "$MINISIGN_SECRET_B64" || (echo "MINISIGN_SECRET_B64 missing"; exit 1)
          echo "$MINISIGN_SECRET_B64" | base64 -d > minisign.key
          chmod 600 minisign.key
          ls -l minisign.key

      - name: Generate checksums
        run: |
          set -e
          cd dist
          sha256sum Paperforge-*-Portable-win64.zip > SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: Sign artifacts (minisign)
        env:
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}   # nếu khóa không passphrase, có thể bỏ dòng này
        run: |
          set -e
          cd dist
          minisign -S -s ../minisign.key -m Paperforge-Supervisor-Portable-win64.zip -x Paperforge-Supervisor-Portable-win64.zip.minisig -H -c "${{ github.ref_name }} supervisor"
          minisign -S -s ../minisign.key -m Paperforge-Student-Portable-win64.zip   -x Paperforge-Student-Portable-win64.zip.minisig   -H -c "${{ github.ref_name }} student"
          minisign -S -s ../minisign.key -m SHA256SUMS.txt                          -x SHA256SUMS.txt.minisig                          -H -c "${{ github.ref_name }} checksums"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/Paperforge-Supervisor-Portable-win64.zip
            dist/Paperforge-Supervisor-Portable-win64.zip.minisig
            dist/Paperforge-Student-Portable-win64.zip
            dist/Paperforge-Student-Portable-win64.zip.minisig
            dist/SHA256SUMS.txt
            dist/SHA256SUMS.txt.minisig
