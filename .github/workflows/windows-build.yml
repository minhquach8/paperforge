name: Windows portable build

on:
  workflow_dispatch:
  push:
    tags: ["v*"]

jobs:
  build:
    runs-on: windows-latest
    env:
      TECTONIC_VER: "0.15.0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Đặt đúng tectonic.exe vào vendor/tectonic/windows-x86_64/
      - name: Fetch Tectonic (Windows)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path vendor\tectonic\windows-x86_64 | Out-Null
          $url = "https://github.com/tectonic-typesetting/tectonic/releases/download/tectonic%40${env:TECTONIC_VER}/tectonic-${env:TECTONIC_VER}-x86_64-pc-windows-msvc.zip"
          Invoke-WebRequest -Uri $url -OutFile tectonic.zip
          Expand-Archive tectonic.zip -DestinationPath vendor\tectonic\windows-x86_64 -Force
          $folder = Get-ChildItem vendor\tectonic\windows-x86_64 | Where-Object { $_.PSIsContainer -and $_.Name -like "tectonic-*" } | Select-Object -First 1
          Copy-Item "$($folder.FullName)\tectonic.exe" vendor\tectonic\windows-x86_64\tectonic.exe -Force
          Remove-Item tectonic.zip

      - name: Build Student (PyInstaller)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          pyinstaller packaging\win_student.spec --noconfirm

      - name: Build Supervisor (PyInstaller)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          pyinstaller packaging\win_supervisor.spec --noconfirm

      - name: List dist/
        shell: pwsh
        run: |
          Write-Host "==== dist/ tree ===="
          Get-ChildItem -Recurse -Force dist | ForEach-Object { $_.FullName }

      - name: Verify expected output folders
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path "dist\Paperforge-Student")) { throw "Missing dist\Paperforge-Student" }
          if (-not (Test-Path "dist\Paperforge-Supervisor")) { throw "Missing dist\Paperforge-Supervisor" }

      - name: Make portable ZIPs
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ver = if ("${{ github.ref_name }}") { "${{ github.ref_name }}" } else { "dev" }
          $studentZip = "dist\Paperforge-Student-win64-portable-$ver.zip"
          $superZip   = "dist\Paperforge-Supervisor-win64-portable-$ver.zip"
          if (Test-Path $studentZip) { Remove-Item $studentZip -Force }
          if (Test-Path $superZip)   { Remove-Item $superZip -Force }
          Compress-Archive -Path "dist\Paperforge-Student\*"   -DestinationPath $studentZip -Force
          Compress-Archive -Path "dist\Paperforge-Supervisor\*" -DestinationPath $superZip -Force

      - name: Upload portable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: |
            dist/Paperforge-Student-win64-portable-*.zip
            dist/Paperforge-Supervisor-win64-portable-*.zip
